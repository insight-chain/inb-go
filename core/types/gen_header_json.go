// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/insight-chain/inb-go/common"
	"github.com/insight-chain/inb-go/common/hexutil"
)

var _ = (*headerMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (h Header) MarshalJSON() ([]byte, error) {
	type Header struct {
		ParentHash       common.Hash        `json:"parentHash"       gencodec:"required"`
		UncleHash        common.Hash        `json:"sha3Uncles"       gencodec:"required"`
		Coinbase         common.Address     `json:"miner"            gencodec:"required"`
		Root             common.Hash        `json:"stateRoot"        gencodec:"required"`
		TxHash           common.Hash        `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash      common.Hash        `json:"receiptsRoot"     gencodec:"required"`
		Bloom            Bloom              `json:"logsBloom"        gencodec:"required"`
		Difficulty       *hexutil.Big       `json:"difficulty"       gencodec:"required"`
		Number           *hexutil.Big       `json:"number"           gencodec:"required"`
		NetLimit         hexutil.Uint64     `json:"netLimit"         gencodec:"required"`
		NetUsed          hexutil.Uint64     `json:"netUsed"          gencodec:"required"`
		Time             *hexutil.Big       `json:"timestamp"        gencodec:"required"`
		Extra            hexutil.Bytes      `json:"extraData"        gencodec:"required"`
		MixDigest        common.Hash        `json:"mixHash"`
		Nonce            BlockNonce         `json:"nonce"`
		DataRoot         common.Hash        `json:"dataRoot"`
		Reward           string             `json:"reward"           gencodec:"required"`
		SpecialConsensus []byte             `json:"specialConsensus"  gencodec:"required"`
		VdposContext     *VdposContextProto `json:"vdposContext"     gencodec:"required"`
		Hash             common.Hash        `json:"hash"`
	}
	var enc Header
	enc.ParentHash = h.ParentHash
	enc.UncleHash = h.UncleHash
	enc.Coinbase = h.Coinbase
	enc.Root = h.Root
	enc.TxHash = h.TxHash
	enc.ReceiptHash = h.ReceiptHash
	enc.Bloom = h.Bloom
	enc.Difficulty = (*hexutil.Big)(h.Difficulty)
	enc.Number = (*hexutil.Big)(h.Number)
	enc.NetLimit = hexutil.Uint64(h.NetLimit)
	enc.NetUsed = hexutil.Uint64(h.NetUsed)
	enc.Time = (*hexutil.Big)(h.Time)
	enc.Extra = h.Extra
	enc.MixDigest = h.MixDigest
	enc.Nonce = h.Nonce
	enc.DataRoot = h.DataRoot
	enc.Reward = h.Reward
	enc.SpecialConsensus = h.SpecialConsensus
	enc.VdposContext = h.VdposContext
	enc.Hash = h.Hash()
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (h *Header) UnmarshalJSON(input []byte) error {
	type Header struct {
		ParentHash       *common.Hash       `json:"parentHash"       gencodec:"required"`
		UncleHash        *common.Hash       `json:"sha3Uncles"       gencodec:"required"`
		Coinbase         *common.Address    `json:"miner"            gencodec:"required"`
		Root             *common.Hash       `json:"stateRoot"        gencodec:"required"`
		TxHash           *common.Hash       `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash      *common.Hash       `json:"receiptsRoot"     gencodec:"required"`
		Bloom            *Bloom             `json:"logsBloom"        gencodec:"required"`
		Difficulty       *hexutil.Big       `json:"difficulty"       gencodec:"required"`
		Number           *hexutil.Big       `json:"number"           gencodec:"required"`
		NetLimit         *hexutil.Uint64    `json:"netLimit"         gencodec:"required"`
		NetUsed          *hexutil.Uint64    `json:"netUsed"          gencodec:"required"`
		Time             *hexutil.Big       `json:"timestamp"        gencodec:"required"`
		Extra            *hexutil.Bytes     `json:"extraData"        gencodec:"required"`
		MixDigest        *common.Hash       `json:"mixHash"`
		Nonce            *BlockNonce        `json:"nonce"`
		DataRoot         *common.Hash       `json:"dataRoot"`
		Reward           *string            `json:"reward"           gencodec:"required"`
		SpecialConsensus *[]byte            `json:"specialConsensus"  gencodec:"required"`
		VdposContext     *VdposContextProto `json:"vdposContext"     gencodec:"required"`
	}
	var dec Header
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for Header")
	}
	h.ParentHash = *dec.ParentHash
	if dec.UncleHash == nil {
		return errors.New("missing required field 'sha3Uncles' for Header")
	}
	h.UncleHash = *dec.UncleHash
	if dec.Coinbase == nil {
		return errors.New("missing required field 'miner' for Header")
	}
	h.Coinbase = *dec.Coinbase
	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for Header")
	}
	h.Root = *dec.Root
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionsRoot' for Header")
	}
	h.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receiptsRoot' for Header")
	}
	h.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for Header")
	}
	h.Bloom = *dec.Bloom
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for Header")
	}
	h.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for Header")
	}
	h.Number = (*big.Int)(dec.Number)
	if dec.NetLimit == nil {
		return errors.New("missing required field 'netLimit' for Header")
	}
	h.NetLimit = uint64(*dec.NetLimit)
	if dec.NetUsed == nil {
		return errors.New("missing required field 'netUsed' for Header")
	}
	h.NetUsed = uint64(*dec.NetUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for Header")
	}
	h.Time = (*big.Int)(dec.Time)
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for Header")
	}
	h.Extra = *dec.Extra
	if dec.MixDigest != nil {
		h.MixDigest = *dec.MixDigest
	}
	if dec.Nonce != nil {
		h.Nonce = *dec.Nonce
	}
	if dec.DataRoot != nil {
		h.DataRoot = *dec.DataRoot
	}
	if dec.Reward == nil {
		return errors.New("missing required field 'reward' for Header")
	}
	h.Reward = *dec.Reward
	if dec.SpecialConsensus == nil {
		return errors.New("missing required field 'specialConsensus' for Header")
	}
	h.SpecialConsensus = *dec.SpecialConsensus
	if dec.VdposContext == nil {
		return errors.New("missing required field 'vdposContext' for Header")
	}
	h.VdposContext = dec.VdposContext
	return nil
}
